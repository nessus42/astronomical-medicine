# -*- Mode: Outline; fill-column: 70; outline-regexp: "[ \t]*-" -*-

- WHAT YOU ARE DOING RIGHT NOW

  - Review the stuff below stating the previous future direction of
    fits2itk.

  - Search for all the TODO tags and resolve them.

  - Make sure that you don't forget the IMPORTANT section immediately
    below.


- REGRESSION TESTS that need to be done

  - Make sure that Jens use case of needing to register
    different images in Slicer 3 still works.

  - Make sure that all the different options work with different test
    images that I have been given in the past.

    x Test with no options

         Worked with region1_xyv.nrrd with no options, which now does not do
         any WCS interpretation.  Orientation was correct.
 
    x Test --rotate-sky

         Worked with 90 degree rotation.  Rotate the image 90
         counter-clockwise.

    x Test --x-scale
    x Test --y-scale
    x Test --sky-scale
    x Test --pixel-scale
    x Test --coerce-to-shorts
    x Test --coerce-to-unsigned-shorts

    x Test --null-value

         Works and properly checks to make sure that value wasn't set to 0.

         Caveat: Takes effect *before* --pixel-scale, as the null value is set
         in the reader, as this is a function of cfitsio.

         Caveat: Cannot set the null value to 0, as this is not allowed by
         cfitsio.

    x Test --flipx, --flipy, --flipz

    x Test --wcs

      Seems to work.

      Note: Without "--x-scale -1", the image will end up flipped, but I think
      that this might be a feature, not a bug.

      o TODO: Have not implemented velocity WCS.

      o TODO: Need to make sure that origin is preserved when registering
           multiple images.

    x Test --show-fits-header

      o TODO: Perhaps should preface the output with "FITS HEADER:"
        or something.

    x Test -n, --no-write

    x --equiangular

    x --autoscale-z-axis

      o TODO: Test this again, since I've messed with the WCS stuff

    x --east-left

      NOTE: I'm not going to implement this unless someone asks for it.

    o Test --verbose

      TODO: Need to add support for velocity info.

    x Test --debug-level

    x -q, --quiet

      NOTE: Not implemented as we don't need it.

    x --lps

      NOTE: Option deleted, as I'm not sure what it was ever supposed to do.

    o Test --north-up.

      x Tested on an image for which north was already up.  Image stayed the
        same.

    o Find out what the proper term is for the inverse coordinate frame
      transformation.

    o Make sure that cfitsio extended filename syntax still works.

    o Test to make sure that program works on FITS file that does not have WCS
      information.




  - Make sure that fits2itk runs on an Intel CPU.


- IMPORTANT

  - I have marked code that I need to make work again with "//?"

  - There are other important notes in ../README.txt

    - A description of the changes that have been made in each clone
      (e.g., *this* one!), but not yet pushed up to the the .mainline
      repository.

- TODO

  - Update the "--help" output to reflect reality.



- Notes about refactoring work on fits2itk

  - Jens says that he thinks the default behavior should be to not use
    the WCS information, and to just leave it in pixel space.

  - In the latest dev version --no-wcs doesn't work because the
    communication channel (static class variables of the reader)
    was severed when moving the reader into a DLL.  It also means
    that there is no way to read in a FITS file that doesn't have
    velocity headers, as the code that does this no longer checks
    for a the no-wcs flag.

- The options that are supported by fits2itk.fixes:

  - The non-dev version

    - Documented

      -h: help message
      -A: auto-scale velocity axis
      -S: coerce pixel values to shorts
      -U: coerce pixel values to unsigned shorts
      -a: axes-scale
      -D: debug-level
      -N null-value
      -r: RA-scale
      -s: pixel-scale
      -v: velocity-scale

      --typical: shortcut for -A -a 1000 -r -1 -s 1000

	   The above command auto-scales the velocity axis, and then
	   scales all of the axes by 1000.  The right ascension axis
	   is then flipped in order to present it in the orientation
	   to which astronomers are accustomed.  The pixel values of
	   the image are then all multiplied by 1000.

      --help

    - Undocumented

      -f: Bug!
      -n: Don't accept output file on command line (used for displaying info)
      -o: Obsolete way of supporting long option names
          These are the options supported:
	     derivativeImageFilter
             flipImageFilter
	     binomialBlur
	     suppressMetaDataDictionary
	     identityFlip
      -R: Bug!

      --equiangular
      --reorient-north

        These two options do three different things depending on
        whether they are used alone or together

      --flip-dec
      --flip-ra
      --flip-v

        These three options cause pixels to actually be shuffled about.

      --no-wcs

        This option suppresses WCS so that the physical coordinates
        are merely the pixel coordinates.

      --rotate-sky degrees

        This option applies a rotation matrix to the image to rotate
        it *counter* clockwise.  TODO: Determine what this means under
        the influence of other options.

      --RIP

        This option forces the output to be in RIP orientation so that
        you won't get a warning message about Analyze files being
        malformatted.

      --scale-dec

        Just like -r, only for decliation, rather than RA.

      --verbose: Provides informational info

    - Options provided by the Slicer GUI plugin

      --xml: Provides the GUI XML
      --logo: Outputs a logo, but this doesn't work
      --dont_autoscale_velocity:
           Suppresses the -A option
      --pixel_type
           Sets either the -S or the -U flag, depending on how this is set
      --cfitsio_extended_filename
           Appends the extended part onto the input filename
      --no_wcs
           Adds the --no-wcs option

    - Options used by the Slicer GUI plugin

      -A
      -S
      -U
      --no-wcs
      Extended filename syntax

- What I was working on "right now" a long time ago when I originally
  wrote this note:

  - Trying to figure out why reorient-north is deactivated in the dev
    version of fits2itk.

- Known bugs:

  - CMakeLists.txt

    - If you make a new build directory, you have to run make several
      times, the first time, before it will compile.

- New mockup of future help output (This also serves to document the output)

  Note: "XXX" means that the feature has been implemented

  usage:

    fits2itk [option ...] input-file output-file

  The input file should be a FITS file (CFITSIO extended filename syntax
  is supported).  The output file should be typically be a NRRD file,
  but other file formats supported by ITK may work, albeit most likely
  in a somewhat buggy manner.

  By default the output coordinates are pixel coordinates, but RA/DEC
  coordinates can be turned on by using the "--wcs" option, and
  image-centered equiangular coordinates can be turned on using the
  "--equiangular" option.

  For informational purposes, fits2itk will output something like the
  following to stdout:

	Input file: foo.fits
	Output file: foo.nrrd
	Image center, in pixels: (86, 41.5, 314.5)
	Image center, in RA/Dec/V: (56.5541, 32.9725, 0)
	Pixel size in degrees: 0.0127778 x 0.0127778
	Pixel size in arcseconds: #@$@#$ x #@#$#@#
	Pixel size in km/s: 8.321

	[ TODO: The above needs work.  It doesn't currently contain all
	  the information that an astronomer might want. ]

  Options:

  -q, --quiet

	    Suppresses the above mentioned output.

  -h

	    Outputs the terse usage message.

  --help

	    Outputs the verbose usage message.

  -n, --no-write

	    Tells fits2itk to not actually write an output file, but
	    instead to just write to stdout whatever it would have
	    written to stdout without this option.

	    Note: When this option is selected, you should not include
	    the ouput file on the command line.

  --pixel-coordinates

            NOTE: Actually, we are not going to do this.  Instead,
            "--wcs" will turn on WCS.

  --north-up

	    Rotates the image so that north is up.

            Disallowed in conjunction with "--wcs" or "--equiangular",
	    as those options always puts north up.

  --east-left

	    Rotates the image so that east is to the left.

            Disallowed in conjunction with "--wcs" or "--equiangular",
	    as those options always put east to the left.

  --wcs
  --equiangular

            See the description of these options at the beginning of
            this help text.

  --pixel-scale FLOAT

	    Every pixel value will be multiplied by FLOAT before writing
	    to the output file.

  --x-scale FLOAT
  --y-scale FLOAT
  --z-scale FLOAT

            FLOAT scales the image along the specified axis.  For
            instance, if you are using pixel coordinates, and you set
            the x-axis scale to 3, then every pixel will be assigned a
            width of 3, rather than 1.  Consequently, in Slicer, the
            coordinates read-outs for the x-axis will be three times
            as large as the actual number of pixels in the image.

	    If you have world coordinates activated, on the other
	    hand, and you also specify an x-axis scale of 1000 here,
	    then the coordinate readout for right ascension will be in
	    millidegrees, rather than degrees.

  --sky-scale FLOAT

	     Equivalent to --x-scale FLOAT --y-scale FLOAT.  If used
	     in conjuction with these options, the result will be
	     multiplicative.
	     

  --autoscale-z-axis

            TODO: A better name for this might be called for?

            Sets the z-axis scale so that its range fits into a cube
            defined by the x- and y-axes.


  --null-value FLOAT

	    Remaps the FITS null value to FLOAT in the output file.  The
	    default null value is typically NaN for floating point FITS
	    files.  NaNs often cause trouble in medical imaging
	    applications, however, so this option is provided in order
	    to work around this issue.

	    Unfortunately you can't set this to 0, due to a limitation
	    in CFITSIO, but you can set it to, e.g., 0.0000001.

  --debug-level INT

	    Sets the debug level to INT.  The default value is 0.


  --flipx
  --flipy
  --flipv

	    These options flip the image before writing to the output
	    file.  They do this by moving pixels around, not by setting
	    the coordinate transformation.  Consequently, these options
	    are only allowed in conjunction with --use-index-space.


  --rotate-sky FLOAT

	    Rotates the image by FLOAT degrees clockwise via ITK's
	    coordinate transformation parameters.

            Cannot be used in conjuction with --wcs or --equiangular.


  --verbose

	    Causes fits2itk to output extra useless information.


  --show-fits-header

	    Tells fits2itk to output the FITS header to stdout.


  --coerce-to-shorts
  --coerce-to-unsigned-shorts

	    The output file will be written using respectively shorts or
	    unsigned shorts rather than the default of single precision
	    floats.

	    Use of these two options is mutually exclusive.

  --lps

	    By default, fits2itk writes the output file with a kludge
	    transformation that compensates for Slicer's conversion from
	    LPS to RAS.  For use with other software that doesn't do
	    such a conversion, this option is provided to turn off the
	    kludge transformation.

  --wcsGridStride UNSIGNED

            Using this option causes fits2itk to output a WCS grid
	    rather, rather than an image of data values.


- Old notes (but read them over at some point to make sure that they
  have all been accounted for)

  These are the options that should be supported in the next version:

  TODO: I think that "XXX" may mean options that have already been
  added to the dev version, but I'm not sure.

  TODO: Reconcile this information with the information that is in the
  version above.

  XXX The DLL:

     XXX This should just load the data cube and do nothing related to WCS with
     it.  I.e., it should be just like --no-wcs.

  {default}

     Does what "--reorient-north --equiangular" does now.  The axes are in
     microdegrees.  The pixel values should also be scaled by 1000 (for
     floating point images, but not for integer images), and the
     velocity axis should be auto-scaled.

     Should output some of what is currently output for the verbose
     option should be output:

	Current format:

	Image center, in IJK space with (0,0,0) index origin: [86, 41.5, 314.5]
	Image center, in RA/Dec: [56.5541, 32.9725, 0]
	I vector, in RA/Dec: [-0.015231, -1.84831e-06, 0]
	J vector, in RA/Dec: [-2.20355e-06, 0.0127778, 0]
	I vector, in approximate angular space: [-0.0127778, -1.84831e-06, 0]
	J vector, in approximate angular space: [-1.84863e-06, 0.0127778, 0]
	|I|, in approximate angular space: 0.0127778
	|J|, in approximate angular space: 0.0127778
	North vector in IJK space: [-0.0001447, 1, 0]
	Rotation of J from North:  0.00829069
	Direction cosines:
	-1 0.0146564 0
	0 0 1
	-0.000121346 0.999893 0
	Image spacing: [0.01514, 0.0127782, 1]
	Image origin: [57.8563, 0, 32.4356]


	New format:

	Input file: foo.fits
	Output file: foo.nrrd
	Image center, in pixels: (86, 41.5, 314.5)
	Image center, in RA/Dec/V: (56.5541, 32.9725, 0)
	Pixel size in degrees: 0.0127778 x 0.0127778
	Pixel size in arcseconds: #@$@#$ x #@#$#@#
	Pixel size in km/s:



	 NOTE: Put the comments in the help text, rather than here.
	 Also for velocity, may have to instead do something like:

	 Pixel size in velocity: $#@$@$#@
	 Velocity units: km/s


  --quiet, -q

    Suppress the above mentioned output.

  XXX -h

     Outputs the terse usage message.

  XXX -n

     Don't actually do anything.

  XXX --help
     Outputs the verbose usage message.

  --no-wcs, --nw
     Leaves the image alone.

     --north-up
       Rotates the image so that north is up.  Only works in conjunction
       with --no-wcs.

     --west-right
       Rotates the image so thata west is to the right.  Only works in
       conjunction with --no-wcs.

  --force-ra-dec, --frd
     Forces the axes to be RA and Dec, rather than angular degrees.

  --west-axis-scale NUM, --was NUM
    Sets the x-axis scale to be NUM microdegrees.  The default value is 1.
    TODO: Figure out what this should do if --no-wcs is set.

  --north-axis-scale NUM, --nas NUM
    Sets the y-axis scale to be NUM microdegrees.  The default value is 1.
    TODO: Figure out what this should do if --no-wcs is set.

  --v-axis-scale NUM, --vas NUM
    TODO: Figure out what this should do.

  --scale-all-axes {x}, --saa NUM, -a NUM
    TODO: Figure out precisely what this should do.

  --null-value NUM, -N NUM
    Sets the null value.  The default value is NaN.  (TODO: Find out
    what it is for integer FITS types.)  You can't set this to 0, due to
    a limitation in CFITSIO.  (TODO: Post to fitsbits or something to
    see if this is really true.)

  --debug-level INT, -D INT
    Sets the debug level to INT.  The default value is 0.

  --pixel-scale {x}, --ps
    Every pixel will be multiplied by x upon converting from FITS to ITK.  The
    default value is 1000.

  --flip-west, --fw
  --flip-north, --fn
  --flip-v, --fv

  --rotate-sky {x}, --rs
    Rotates the image by x degrees counter-clockwise.

  --verbose

  --show-fits-header

  --derivative-image-filter
  --flip-image-filter
  --binomial-blur-filter
  --suppress-metadata-dictionary
  --identity-flip

  --coerce-to-shorts, --cts
  --coerce-to-unsigned-shorts, --ctus

  --lps
    For use with programs other than Slicer that do not need the kludge
    that compensates for Slicer's conversion to RAS.


- Options to remove

  --RIP

    Replace this with noticing that the output file format is ".hdr" or
    ".dat" and set the option automatically.


- Other things to consider

  - BUNITS is the FITS header that describes the units for the intensity
    scale.  We may want to output it, if it is present, but it doesn't
    occur in all FITS files.

  - Here is an exemplar of the velocity information for a data cube.  This
    one is just a bunch of slices with a linear delta between slices:

       CRVAL3  =       -9970.58488358 /
       CRPIX3  =              1.00000 /
       CDELT3  =        63.5021900000 /
       CTYPE3  = 'VELO-LSR'           /

    VELO-LSR here means Local Standard Region, which means that the
    doppler shifts have been adjusted to the average velocity of a
    canonical area of the galaxy around our sun.  Notice, however, that
    there are no units.  Jens says that there is a standard default
    units.  I should look this up in the FITS standards document to see
    what it has to say on the issue.

- Design notes


- Features that I added a while back:

  - New features requested by Mike:

    - Grid transform approximation output

      - Summary of Mike's request

	- Program to take a FITS file as input and write out a NRRD file
	  for which every voxel is the WCS coordinate of the voxel.

	  - We will typically want to down-sample the data, as
	    interpolation can be used to determine the WCS coordinates
	    for pixels not explicitly represented.  We will only need to
	    or three layers for the velocity axis, as this is typically
	    linear.

	  - Me: Maybe I can just use the CFITSIO extended filename
	    syntax 

      - Text of Mike's request

	I propose we do a grid transform approximation to the true WCS
	transform.  In a grid transform, we transform every nth voxel in the
	volume from pixel space to WCS space, and write out the
	result. Interpolation is later used to find transformed values for
	other voxels.

	Since Slicer deals well with images, we'll use an image volume (in a
	NRRD file) to store the result.  The NRRD images representing the
	transform can get across the execution module bridge to Slicer.  The
	level of approximation can be set in the user interface.

	VTK has a Grid Transform object, which handles inverse transforms and
	interpolation issues.  On the Slicer side, we'll use the
	vtkGridTransform and the mechanism I've talked about before for
	handling multiple coordinate systems in the scene. I think I can talk
	Steve into adding this functionality, since it has much more utility
	than just our application.

	So, your action item would be populating and writing out this new NRRD
	file as an extra parameter of the filter.

	If we have that, I think we have a pretty complete package --
	everything else needs to happen inside Slicer (with the possible
	exception of NaNs).

    - 2D to 3D image extrusion

      - Summary of Mike's request

	- Program to take as input

	     (1) a 2D image
	     (2) a FITS file (or header)
	     (3) a velocity range
	     (4) a channel select

	  and ouput a NRRD file (in the same format as that output by
	  fits2itk) from #1 that contains two copies of the image, the
	  FITS header, and a transformation matrix that causes the image
	  to be extruded throughout the velocity range specified by #3.
	  The channel select lets you chose which channels of image you
	  wish to put into the NRRD file.

      - Text of Mike's request

	I was thinking that it might be time to write a new command-line
	filter for Slicer3, one that can be used standalone much like the
	existing fits2itk.

	This is one that will make a nrrd volume from a single image, much
	like Alyssa's wanted to do forever.

	Inputs:

	image) a PNG/JPEG/TIFF file
	fits_header_or_image) a FITS file
	z_min, z_max) a numeric range for the third dimension
	channel_select) which image channel to use

	Output:

	output) a NRRD file with the encoded FITS information, like fits2itk
	outputs.

	Operation:

	This filter takes the contents of a 2D raster image and turns it into
	a synthetic volume with the given extent for Slicer3.

	The image data is extracted from the "image" input, with the option of
	using the RGB information (if it exists) or a single color channel as
	specified by the "channel_select" input.

	This information is combined with the FITS header found in the
	"fits_header_or_image" input.  This FITS file is produced by an
	outside provider such as astrometry.net, or a custom IDL file.

	If "image" is provided, the FITS file is used only as a header
	describing the spatial orientation of the image.  If "image" isn't
	specified, the 2D image data in "fits_header_or_image" is used.  In
	this case, channel_select is honored as well if the FITS file contains
	multiple channels.

	The "z_min" and "z_max" values provide the extent of the volume in the
	dimension orthogonal to the image itself.  For now, we'll assume the
	image lies in the two spatial dimensions, so "z" will be our velocity
	dimension.

	The output image is a NRRD file that uses the same coordinate
	conventions as fits2itk.  It would be a volume with two copies of the
	data, effectively the front and back planes.  (This isn't the most
	elegant way I can think of to do this implementation, but we know it
	will work without any internal itk or Slicer hacking.)

	The filter should be able to run on either command line or as a slicer
	execution module.

	This would be a big win for everyone, saving Michelle and Jens the
	trouble of doing this stuff by hand.
